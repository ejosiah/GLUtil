const int MAX_LIGHT_SOURCES = 10;

struct LightSource{
	vec4 position;
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	vec4 spotDirection;
	float spotAngle;
	float spotExponent;
	float kc;
	float ki;
	float kq;
	bool transform;
	bool on;
};

struct Material{
	vec4 emission;
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	float shininess;
};

struct ToonShader{
	int levels;
	float scaleFactor;
};

struct LightModel {
	bool localViewer;
	bool twoSided;
	vec4 globalAmbience;
};

uniform mat4 MV;
uniform LightSource light[MAX_LIGHT_SOURCES];
uniform Material material[2];
uniform bool celShading;
uniform LightModel lightModel;


ToonShader toonShader;

in VERTEX{
	smooth vec3 position;
	smooth vec3 normal;
	smooth vec2 texCoord;
	smooth vec4 color;
	smooth vec4 lightDirection[MAX_LIGHT_SOURCES];
} vertex;
noperspective in vec3 edgeDistance;


float daf(float dist, LightSource light){
	return 1.0 / (light.kc + light.ki * dist + light.kq * dist * dist);
}

float saf(LightSource light, vec3 lightDirection){
	vec3 l = normalize(lightDirection);
	vec3 d = normalize(light.spotDirection).xyz;
	float h = light.spotExponent;
	
	if(light.spotAngle >= 180) 	return 1.0;
	
	float _LdotD = dot(-l, d);
	float cos_spotAngle = cos(radians(light.spotAngle));
	
	if(_LdotD < cos_spotAngle) return 0.0;
	
	return pow(_LdotD, h); 
}

float getLineMixColor(){
	float d = min( min(edgeDistance.x, edgeDistance.y), edgeDistance.z);
	return smoothstep(line.width - 1, line.width + 1, d);
}

vec4 apply(LightSource light, vec4 direction, Material m){
	if(!light.on) return vec4(0);
	toonShader.levels = 3;
	toonShader.scaleFactor = 1.0 / toonShader.levels;
	vec3 n = gl_FrontFacing ? normalize(vertex.normal) : normalize(-vertex.normal);
	vec4 pos = vec4(vertex.position, 1.0);
	vec3 l = direction.xyz;
	float f = m.shininess;
		
	float _daf = daf(length(l), light);
	float _saf = saf(light, l);
	
	vec4 ambient = light.ambient * m.ambient;
	
	vec4 diffuse =  celShading ? floor(max(dot(l, n), 0) * toonShader.levels) * toonShader.scaleFactor * light.diffuse * m.diffuse
							: max(dot(l, n), 0)  * light.diffuse * m.diffuse;
	
	vec3 e = lightModel.localViewer ? normalize(-pos.xyz) : vec3(0, 0, 1);
	vec3 s = normalize(l + e);	// half way vector between light direction and eyes
	vec4 specular = pow(max(dot(s, n), 0), f) * light.specular * m.specular;

	return  _daf * _saf * ((ambient + diffuse) + specular); 
}

vec4 phongLightModel(){
	Material m = !lightModel.twoSided ?  material[0] : gl_FrontFacing ? material[0] : material[1];
	vec4 color = m.emission + lightModel.globalAmbience * m.ambient;

	for(int i = 0; i < light.length(); i++ ) 
		color += apply(light[i], vertex.lightDirection[i], m);

	return color;
}
