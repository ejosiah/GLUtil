#version 450 core

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

struct Particle{
	vec3 position;
	float damping;

	vec3 prevPosition;
	float lifetime;

	vec3 velocity;
	float inverseMass;

	vec3 acceleration;
	int forceGenerators;

	vec3 forceAccum;
	int _active;

};

uniform float dt;
uniform int iterations = 1;
uniform int numParticles;

layout(std430, binding=0) buffer PARTICLE_SSBO{
	Particle particles[];
};

layout(std430, binding=1) buffer PARTICLE_WORKPAD_SSBO{
	Particle workpad[];
};

ivec3 totalWorkGroups = ivec3(gl_WorkGroupSize * gl_NumWorkGroups);

int globalIndex(){
	ivec3 size = totalWorkGroups;
	ivec3 pos = ivec3(gl_GlobalInvocationID);

	return pos.z * (size.y * size.x) + (pos.y * size.x) + pos.x;
}

void main(){
	int index = globalIndex();

	if(index > numParticles) return;


	
	
	
//	workpad[index] = particles[index];
//	memoryBarrier();	// flush writes to memory

	Particle particle = particles[index];

	bool _active = bool(particle._active);
	if(!_active) return;


	if(particle.inverseMass <= 0.0) return;
	//if(inverseMass <= 0.0) return;

	float t = dt/iterations;

	for(int i = 0; i < iterations; i++){
		particle.position += particle.velocity * t;

		vec3 acceleration = particle.inverseMass * particle.forceAccum;
		acceleration += particle.acceleration;

		particle.velocity += acceleration * t;
		particle.acceleration = acceleration;

	//	particle.velocity *= pow(particle.damping, dt);

		particle.lifetime += t;
	}

	particle.forceAccum = vec3(0);

	particles[index] = particle;

}