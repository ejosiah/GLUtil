#version 460 core

#define _STR(x) #x
#define STR(x) _STR(x)
#define LC_IDX gl_LocalInvocationIndex
#define WG_SIZE 256
#define BLOCK_SIZE 1024
#define BITS_WORD 32
#define BITS_BYTE 8
#define BYTES_WORD (BITS_WORD/BITS_BYTE)
#define RADIX ((1 << BITS_BYTE))
#define DIGIT(A, B) (uint(A >> BITS_BYTE * (BYTES_WORD - B - 1)) & (RADIX - 1))
#define BARRIER groupMemoryBarrier(); barrier()

layout(local_size_x = 256) in;
//
//layout(std430, binding = 0) buffer COUNT_BUFFER{
//	uint count[RADIX];
//};
//

layout(r32ui, binding = 0) uniform uimageBuffer count;
layout(r32ui, binding = 1) uniform uimageBuffer count_size;
layout(r32ui, binding = 2) uniform uimageBuffer input_buff;
layout(r32ui, binding = 3) uniform uimageBuffer aux_buff;
layout(r32ui, binding = 4) uniform uimageBuffer index_buff;

uniform int numItems;


shared uint local_sort[BLOCK_SIZE];


void sortIndexs(uint size, int id, int blockSize){
	int i = 1;
	while(i < size){
		int j = i;
		while(j > 0){
			int j_loc = id * blockSize * 2 + j;
			int j_prev_loc = id * blockSize * 2 + (j-1);

			int jVal = int(imageLoad(index_buff, j_loc).x);
			uint jPrivVal = int(imageLoad(index_buff, j_prev_loc).x);
			if(jPrivVal < jVal){
				break;
			};

			imageStore(index_buff, j_prev_loc, uvec4(jVal));
			imageStore(index_buff, j_loc, uvec4(jPrivVal));
			j -= 1;
		}
		i += 1;
	}
}

int digit( int index, int byteIndex){
	uint val = imageLoad(input_buff, index).x;
	return int(DIGIT(val, byteIndex));
}

void main(){
	int id = int(gl_GlobalInvocationID.x);
	int blockSize = numItems/RADIX;

	for(int d = BYTES_WORD - 2; d >= BYTES_WORD - 2; d--){

		imageStore(count, id, uvec4(0));
		imageStore(count_size, id, uvec4(0));
		memoryBarrier();
		for(int i = 0; i < blockSize; i++){
			int index = id * blockSize + i;
			int key = digit(index, d);
			int index0 = int(imageAtomicAdd(count, key, 1));
			imageAtomicAdd(count_size, key, 1);
			index0 = key * blockSize * 2 + index0;
			imageStore(index_buff, index0, uvec4(index));
		}
		
		memoryBarrier();

//		if(id == 0){
//			for(int j  = 1; j < RADIX; j++){
//				uint val = imageLoad(count, j - 1).x;
//				val += imageLoad(count, j).x;
//				imageStore(count, j, uvec4(val));
//			}
//
//			for(int j = RADIX - 1; j > 0; j--){
//				uint val = imageLoad(count, j - 1).x;
//				imageStore(count, j, uvec4(val));
//			}
//			imageStore(count, 0, uvec4(0));
//		}
//		barrier();
//		memoryBarrier();
//
//		uint size = imageLoad(count_size, id).x;
//		sortIndexs(size, id, blockSize);
//		for(int i = 0; i < size; i++){
//			int loc = id * blockSize * 2 + i;
//			int index = int(imageLoad(index_buff, loc).x);
//			
//			uint val = imageLoad(input_buff, index).x;
//			index = int(imageLoad(count, id).x);
//			imageStore(aux_buff, index, uvec4(val));
//
//		//	imageStore(index_buff, loc, uvec4(0));
//			barrier();
//			memoryBarrier();
//			imageAtomicAdd(count, id, 1);
//		}
	}

}