#version 450 core


layout(local_size_x= 32, local_size_y = 32) in;

struct Ray {
	vec3 origin;
	vec3 direction;
	float tMax;
};

struct Camera {
	mat4 cameraToWorld;
	mat4 cameraToScreen;
	mat4 rasterToCamera;
	mat4 screenToRaster;
	mat4 rasterToScreen;
	float shutterOpen;
	float shutterClose;
	float lensRadius;
	float focalDistance;
};


layout(std430, binding=0) buffer CAMERA_SSB0{
	Camera camera;
};

layout(std430, binding=1) buffer RAY_SSB0{
	Ray rays[];
};


int globalIndex();

void generateRay(in vec2 pos, in Camera camera, inout Ray ray);

void main(){
	vec2 pos = vec2(gl_GlobalInvocationID.xy);

	Ray ray;
	generateRay(pos, camera, ray);
	int index = globalIndex();

	rays[index] = ray;
}

int globalIndex(){
	ivec3 size = ivec3(gl_WorkGroupSize * gl_NumWorkGroups);
	ivec3 pos = ivec3(gl_GlobalInvocationID);

	return pos.z * (size.y * size.x) + (pos.y * size.x) + pos.x;

}

void generateRay(in vec2 pos, in Camera camera, inout Ray ray) {
	vec3 p = (camera.rasterToCamera * vec4(pos, 0, 1)).xyz;
	vec4 origin = vec4(vec3(0), 1);
	vec3 direction = normalize(p);

	ray.origin = (camera.cameraToWorld * origin).xyz;
	direction = mat3(camera.cameraToWorld) * direction;
	ray.direction = normalize(direction);
	ray.tMax = 1000000;
}