#version 450 core
#pragma debug(on)
#pragma optimize(off)

layout( local_size_x = 32, local_size_y = 32 ) in;
layout(binding = 0 ) uniform samplerCube cubeMap;
layout(rgba32f, binding = 0) uniform imageBuffer totals;
layout(rgba32f, binding = 1) uniform imageCubeArray prefilteredImage;

const float PI = 3.1415926535897932384626422832795028841971;
const float TWO_PI = 6.2831853071795864769252867665590057683943;

const uint samplesPerGroup = gl_WorkGroupSize.x * gl_WorkGroupSize.y; 
const uint numSamples = samplesPerGroup * gl_NumWorkGroups.x;
const uint i = gl_NumWorkGroups.x * samplesPerGroup + gl_LocalInvocationIndex;
const uint lm_index = gl_WorkGroupID.y;
const uint workGroupIndex = gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x;
const uint layer = gl_WorkGroupID.y;

shared vec3 localSample[samplesPerGroup];

vec3 octDecode(vec2 uv);
vec2 hammersleySquare(uint i, const uint N);

uniform bool irradiance = false;

void main(){
	vec2 uv = hammersleySquare(gl_LocalInvocationIndex, numSamples); 

	vec3 N = octDecode(uv * 2.0 - 1.0);
	vec3 up    = vec3(0.0, 1.0, 0.0);
    vec3 right = cross(up, N);
    up = cross(N, right);

    float theta = 2 * acos(sqrt(1 - uv.x));
    float phi = TWO_PI * uv.y;
    vec3 p = vec3(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));
	vec3 sampleDirection = p.x * right + p.y * up + p.z * N;

	localSample[gl_LocalInvocationIndex] = texture(cubeMap, sampleDirection).rgb;

	barrier();

	if(gl_LocalInvocationID.x == 0){
		vec3 total = vec3(0);
		for(int i = 0; i < samplesPerGroup; i++){
			total += localSample[i];
		}
		imageStore(totals, int(workGroupIndex), vec4(total, 0));
		memoryBarrier();
	}

	barrier();

	if(gl_LocalInvocationID.x == 0 && gl_WorkGroupID.x == 0){
		vec3 total = vec3(0);
		for(int i = 0; i < gl_NumWorkGroups.x; i++){
		 int index = int(gl_WorkGroupID.y * gl_NumWorkGroups.x) + i;
			total += imageLoad(totals, index).rgb;
		}
		total /= float(numSamples);
		total = irradiance ? total * PI : total;
		imageStore(prefilteredImage, ivec3(sampleDirection), vec4(total,0));
	}
	
	
	vec3 total = vec3(0.0);

}