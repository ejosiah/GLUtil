#version 450 core

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(rgba32f, binding=0) uniform image2D image;

layout(binding = 0) uniform samplerCube environmentMap;
layout(binding=1) uniform sampler2D checkerboard;

layout(binding=0, offset=0) uniform atomic_uint ray_count;
layout(binding=0, offset=4) uniform atomic_uint shadow_ray_count;
layout(binding=0, offset=8) uniform atomic_uint	test_count;

layout(binding=1, offset=0) uniform atomic_uint triangle_test_count;
layout(binding=1, offset=4) uniform atomic_uint sphere_test_count;
layout(binding=1, offset=8) uniform atomic_uint plane_test_count;
layout(binding=1, offset=12) uniform atomic_uint box_test_count;


const int MAX_BOUNCES = 5;
const float RRThreshold = 0.001;

uniform vec3 camPos;
uniform vec3 worldCenter;
uniform float worldRadius;
uniform int numPlanes = 1;
uniform int numSpheres = 1;
uniform int numTriangles = 1;
uniform int bounces = 5;
uniform bool fetchFromTexture = true;
uniform bool cullBackFace = false;

// BVH start
uniform float maxDepth;
uniform int numNodes;
uniform bool useLowPoly = false;
uniform int lowPolyRoot;
uniform float currentSample;
// BVH End


#pragma include("ray_tracing_common.glsl")
#pragma include("ray_tracing_model.glsl")
#pragma include("ray_shape_test.glsl")
#pragma include("lights.glsl")
#pragma include("hash.glsl")


layout(std430, binding=1) buffer RAY_SSB0{
	Ray rays[];
};

layout(std430, binding=2) buffer LIGHT_SOURCE_SSBO{
	LightSource light[];
};

layout(std430, binding=3) buffer MATERIAL_SSB0{
	Material material[];

};

layout(std430, binding=5) buffer PLANE_SSB0{
	Plane plane[];
};

layout(std430, binding=4) buffer SPHERE_SSB0{
	Sphere sphere[];
};

layout(std430, binding=6) buffer TRIANGLE_SSB0{
	Triangle triangles[];
};

layout(std430, binding=7) buffer SHADING_SSB0{
	Shading shadings[];
};

layout(std430, binding=8) buffer BVH_SSBO{
    BVHNode bvh[];
};

layout(std430, binding=9) buffer BVH_TRI_INDEX_SSBO{
    int index[];
};

layout(std430, binding=11) buffer DEBUG_SSB0{
	Debug debugs[];
};


uniform Box bounds;
uniform TriangleData triangleData;

#pragma include("interaction.glsl")
#pragma include("scene_test.glsl")

ivec3 totalWorkGroups = ivec3(gl_WorkGroupSize * gl_NumWorkGroups);

int globalIndex(){
	ivec3 size = totalWorkGroups;
	ivec3 pos = ivec3(gl_GlobalInvocationID);

	return pos.z * (size.y * size.x) + (pos.y * size.x) + pos.x;
}

int midIndex(){
	ivec3 size = totalWorkGroups;
	ivec3 pos = ivec3(gl_GlobalInvocationID)/2;

	return pos.z * (size.y * size.x) + (pos.y * size.x) + pos.x;
}

vec3 shade(SurfaceInteration interact){
	Ray shadow_ray;
	float pdf;
	vec3 wi;
	vec3 I = sample_Li(light[0], interact, vec2(0), wi, pdf, shadow_ray);

	if(pdf == 0 || isBlack(I)) return vec3(0);

	vec3 p = interact.p;
	vec3 n = interact.n;
	vec3 wo = normalize( camPos - p);
	vec3 h = normalize(wi + wo);

	vec3 ka = vec3(0);
	vec3 kd = interact.color.xyz;
	vec3 ks = I;
	float f = 5.0;

	if(interact.matId >= 0){
		Material mat = material[interact.matId];
		ka = mat.diffuse.xyz;
		kd = mat.diffuse.xyz;
		ks = mat.specular.xyz;
		f = mat.shine;
	}else{
		ka = vec3(0);
		kd = Checkerboard(interact.uv);
	//	kd = texture(checkerboard, interact.uv).rgb;
		ks = vec3(1);
		f = 20.0;
	}

	float wi_dot_n = dot(wi, n);

	//vec3 Li = ka * vec3(0.3) + I;
	vec3 Li = vec3(0);

	Li += I * max(0, wi_dot_n) * kd;
	Li += I * max(0, pow(dot(n, h), f)) * ks;

	float visibility = 1.0;
	if(wi_dot_n > 0 && anyHit(shadow_ray)){
		atomicCounterIncrement(shadow_ray_count);
		visibility = 0.3;
	}

//	return  wi_dot_n > 0 && inShadow ? mix(Li, vec3(0), 0.7) : Li;
	return  mix(vec3(0), Li, visibility);
}

vec3 doReflect(vec3 wo, out vec3 wi, SurfaceInteration interact, out float pdf){
	pdf = 1.0;
	wi = reflect(-wo, interact.n);

//	if(interact.shape == PLANE){
//		return texture(checkerboard, interact.uv).rgb;
//	}

	return vec3(1);
}

vec3 doRefract(vec3 wo, out vec3 wi, SurfaceInteration interact, out float pdf){
    float cos0 = dot(wo, interact.n);
	bool entering = cos0 > 0;
	float etaI = entering ? interact.n1 : interact.n2;
	float etaT = entering ? interact.n2 : interact.n1;
	float eta = etaI / etaT;

	pdf = 1.0;
//	float sinsq0 = 1 - cos0 * cos0;
//	if(sinsq0 >= 1){
//		pdf = 0.0;
//		return vec3(0);
//	}

	vec3 n = interact.n;
	n = flipNormal(wo, n);
	wi = refract(-wo, n, eta);

//	if(interact.shape == PLANE){
//		return texture(checkerboard, interact.uv).rgb;
//	}

	return vec3(1);
}

Debug debug;

vec3 trace1(Ray ray);
vec3 trace2(Ray ray);

vec3 weight = vec3(0);

vec3 trace(Ray ray){
	vec3 color = vec3(0);
	vec3 mask = vec3(1);
	vec3 accum_f = vec3(1);
	float accum_pdf = 1;
	Ray r = ray;
	for(int i = 0; i < bounces; i++){
		if(accum_pdf <= RRThreshold) break;
		atomicCounterIncrement(ray_count);
		HitInfo hit;
		vec3 wo = -r.direction;
		vec3 wi;
		if (intersectScene(r, hit)){
			SurfaceInteration interact;
			intialize(hit, r, interact);

		//	if(interact.shape == BOX) return vec3(1, 0, 0);

//			Ray shadow_ray;
//			float lpdf;
//			vec3 Li = sample_Li(light[0], interact, vec2(0), wi, lpdf, shadow_ray);
//			vec3 Li_dir = light[0].position.xyz - interact.p;
//			vec3 n = interact.n;
//			wi = normalize(Li_dir);
//			vec3 wh = normalize(wo+wi);
//			vec3 specular =   Li * max(0, pow(dot(n, wi), 50));

			if(hasBsdf(interact, SPECIULAR_REFLECT)){
				float pdf;
				accum_f *= doReflect(wo, wi, interact, pdf);
				accum_pdf *= pdf;

			}else if(hasBsdf(interact, SPECULAR_TRANSMISSION)){
			// mask *= fresnel
				float pdf;
				accum_f *= doRefract(wo, wi, interact, pdf);
				accum_pdf *= pdf;
			}
			else if(hasBsdf(interact, FRESNEL_SPECULAR)){
				vec3 n = interact.n;
				float pdf_local;
				float cos0 = dot(wo, n);
				float f  = fresnel(cos0, interact.n1, interact.n2);
				float ks = 1 - f;
				
				vec3 wi_r;
				float pdf_r;
				vec3 R = doReflect(wo, wi_r, interact, pdf_r);
				Ray rr = spawnRay(interact, wi_r);

				color += accum_f * f * R * trace1(rr);
				weight += accum_f * f;

				float pdf;
				accum_f *= doRefract(wo, wi, interact, pdf) * ks;
				accum_pdf *= pdf * ks;

				if(i == 1){
					Triangle tri;
					Shading s;
					debug.o = triangles[11].a;
					debug.d = triangles[11].b;
					debug.n = triangles[11].c;
					debug.wo = vec4(s.n0, 1);
					debug.wi = vec4(s.n1, 1);
					debug.f = f;
					debug.cos0 = cos0;
					debug.n1 = interact.n1;
					debug.n2 = interact.n2;
					debug.bounce = i;
					debug.id = numTriangles;
					debug.shapeId = 0;
					debug.t = hit.t;
				}
			}
			else{
				color += accum_f * shade(interact);
				weight += accum_f;
				break;
			}
			r = spawnRay(interact, wi);
		}
		else{
			color += accum_f * texture(environmentMap, r.direction).rgb;
			weight += accum_f;
			break;
		}
	}
	return color;
}

vec3 trace1(Ray ray){
	vec3 color = vec3(0);
	vec3 mask = vec3(1);
	vec3 accum_f = vec3(1);
	float accum_pdf = 1;
	Ray r = ray;
	for(int i = 0; i < bounces * 0.5; i++){
		if(accum_pdf <= RRThreshold) break;
		atomicCounterIncrement(ray_count);
		HitInfo hit;
		vec3 wo = -r.direction;
		vec3 wi;
		if (intersectScene(r, hit)){
			SurfaceInteration interact;
			intialize(hit, r, interact);
			if(hasBsdf(interact, SPECIULAR_REFLECT)){
				float pdf;
				accum_f *= doReflect(wo, wi, interact, pdf);
				accum_pdf *= pdf;

			}else if(hasBsdf(interact, SPECULAR_TRANSMISSION)){
			// mask *= fresnel
				float pdf;
				accum_f *= doRefract(wo, wi, interact, pdf);
				accum_pdf *= pdf;
			}else if(hasBsdf(interact, FRESNEL_SPECULAR)){
				vec3 n = interact.n;
				float pdf_local;
				float cos0 = dot(wo, n);
				float f  = fresnel(cos0, interact.n1, interact.n2);
				float ks = 1 - f;
				
				vec3 wi_r;
				float pdf_r;
				vec3 R = doReflect(wo, wi_r, interact, pdf_r);
				Ray rr = spawnRay(interact, wi_r);

				color += accum_f  * f * R * trace2(rr);
				weight += accum_f * f;

				float pdf;
				accum_f *= doRefract(wo, wi, interact, pdf) * ks;
				accum_pdf *= pdf * ks;
			}
			else{
				color += accum_f * shade(interact);
				weight += accum_f;
				break;
			}
			r = spawnRay(interact, wi);
		}
		else{
			color += accum_f * texture(environmentMap, r.direction).rgb;
			weight += accum_f;
			break;
		}
	}
	return color;
}

vec3 trace2(Ray ray){
	vec3 color = vec3(0);
	Ray r = ray;
	HitInfo hit;
	atomicCounterIncrement(ray_count);
	if (intersectScene(r, hit)){
		SurfaceInteration interact;
		intialize(hit, r, interact);
		if(!hasFlag(interact, SPECULAR_TRANSMISSION | SPECIULAR_REFLECT | FRESNEL_SPECULAR)){
			color = shade(interact);
		}else{
			color = vec3(0);
		}
	}else{
		color = texture(environmentMap, r.direction).rgb;
	}
	

	return color;
}

void main(){
	int index = globalIndex();
	Ray ray = rays[index];
	

	vec3 color = trace(ray);

	color /= color + vec3(1.0);
	color = pow(color, vec3(1.0/2.2));
//	color = triangles[index%12].a.xyz;
//	debug.wo = vec4(weight, 0);
	debugs[index] = debug;

	vec3 destColor = imageLoad(image, ivec2(gl_GlobalInvocationID.xy)).rgb;
	float n = currentSample + 1;
	color = mix(destColor, color, 1/n);

	imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1));
}
