#version 450 core

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(rgba32f, binding=0) uniform image2D image;

layout(binding = 0) uniform samplerCube environmentMap;

#pragma include("ray_tracing_common.glsl")
#pragma include("ray_tracing_model.glsl")
#pragma include("ray_shape_test.glsl")


layout(std430, binding=1) buffer RAY_SSB0{
	Ray rays[];
};



int globalIndex(){
	ivec3 size = ivec3(gl_WorkGroupSize * gl_NumWorkGroups);
	ivec3 pos = ivec3(gl_GlobalInvocationID);

	return pos.z * (size.y * size.x) + (pos.y * size.x) + pos.x;
}


void main(){
	int index = globalIndex();
	Ray ray = rays[index];
	vec3 color = texture(environmentMap, ray.direction.xyz).rgb;

	color /= color + vec3(1.0);
	color = pow(color, vec3(1.0/2.2));

	imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1));
}

