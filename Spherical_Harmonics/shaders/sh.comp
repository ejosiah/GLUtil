#version 450 core
#pragma debug(on)
#pragma optimize(off)


layout( local_size_x = 32, local_size_y = 32 ) in;

layout(binding = 0 ) uniform samplerCube cubeMap;
layout(rgba32f, binding = 0) uniform imageBuffer shCoefficients;

vec2 hammersleySquare(uint i, const uint N);
vec2 jittered(vec2 uv, const uint N);
vec3 SH_Coefficeints(vec3 p, uint i);

const float PI = 22/7.0;
const float TWO_PI = PI * 2;
const float _4_PI = 2 * TWO_PI;

const int sqrt_n = 32;
const uint N = gl_WorkGroupSize.x * gl_WorkGroupSize.y;
const uint i = gl_LocalInvocationIndex;
const uint lm_index = gl_WorkGroupID.x;

shared vec3 coeff[N];

void main(){
    
   // vec2 uv = vec2(gl_LocalInvocationID.xy/gl_WorkGroupSize.xy);
    vec2 uv = hammersleySquare(i, N); 
  //  vec2 uv = jittered(vec2(gl_LocalInvocationID.xy), sqrt_n); 
	float theta = 2 * acos(sqrt(1 - uv.x));
    float phi = TWO_PI * uv.y;
    vec3 p = vec3(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));

    vec3 Y_lm = SH_Coefficeints(p, lm_index);
    vec3 L = texture(cubeMap, p).rgb;
   // vec3 L = vec3(max(0, 5 * cos(theta) - 4)) + vec3(max(0, -4 * sin(theta - PI) * cos(phi - 2.5) - 3));
    coeff[i] = L * Y_lm;
	
    barrier();

    
    if(i == 0){ // only need one invocation to sum the results;
        vec3 total = vec3(0);
        vec3 L_lm = vec3(0);
        for(int j = 0; j < N; j++){
            total += coeff[j];
        }
        L_lm = (PI/N) * total;
        imageStore(shCoefficients, int(lm_index), vec4(L_lm, 1.0));
    }
}

vec2 hammersleySquare(uint i, const uint N) {
    vec2 P;
    P.x = float(i) * (1.0 / float(N));

    i = (i << 16u) | (i >> 16u);
    i = ((i & 0x55555555u) << 1u) | ((i & 0xAAAAAAAAu) >> 1u);
    i = ((i & 0x33333333u) << 2u) | ((i & 0xCCCCCCCCu) >> 2u);
    i = ((i & 0x0F0F0F0Fu) << 4u) | ((i & 0xF0F0F0F0u) >> 4u);
    i = ((i & 0x00FF00FFu) << 8u) | ((i & 0xFF00FF00u) >> 8u);
    P.y = float(i) * 2.3283064365386963e-10; // / 0x100000000

    return P;
}

vec2 hash22(vec2 p)
{
	vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yzx+33.33);
    return fract((p3.xx+p3.yz)*p3.zy);

}

vec2 jittered(vec2 uv, const uint N){
    vec2 rand = hash22(uv);
    return vec2(
        (uv.x + rand.x) * (1/float(N)),
        (uv.y + rand.y) * (1/float(N))
    );
}

vec3 SH_Coefficeints(vec3 p, uint i){
    switch(i){
        case 0: 
            return vec3(0.28095); // Y00
        case 1:
         return vec3(0.488603 * p.y);  // Y1-1
        case 2: 
         return vec3(0.488603 * p.z); // Y10
        case 3: 
            return vec3(0.488603 * p.x); // Y11 
        case 4:
            return vec3(1.092548 * p.x * p.y);  // Y2-2
        case 5: 
            return vec3(1.092548 * p.y * p.z); // Y2-1
        case 7:
            return vec3(1.092548 * p.x * p.z);  // Y21
        case 6: 
            return 0.315392 * vec3(3 * p.z * p.z - 1); // Y20
        case 8: 
            return 0.546274 * vec3(p.x * p.x - p.y * p.y); // Y22
    }
    return vec3(0);
}
