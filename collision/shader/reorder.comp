#version 460 core

#define RADIX 256
#define WORKGROUP_SIZE 1024
#define CONSTS 0
#define COUNTS 0
#define DATA 1
#define NUM_DATA_ELEMENTS 4
#define SUMS 5
#define IN_CELL_ID 0
#define OUT_CELL_ID 1
#define BYTE_SIZE 8
#define BARRIER groupMemoryBarrier(); barrier()
#define DIGIT(WORD, BYTE, RADIX) ((WORD >> BYTE * BYTE_SIZE) & (RADIX-1))
#define IS_GROUP_LEADER(ID, NUM_INVOC_PER_GROUP) ((ID % NUM_INVOC_PER_GROUP) == 0)

layout(local_size_x = WORKGROUP_SIZE) in;

layout(binding = CONSTS) uniform Consts{
	uint byte;
	uint R;
	uint Radix;
	uint Num_Groups_per_WorkGroup;
	uint Num_Elements_per_WorkGroup;
	uint Num_Elements_Per_Group;
	uint Num_Elements;
	uint Num_Radices_Per_WorkGroup;
	uint Num_Groups;
};

layout(std430, binding=COUNTS) buffer Counts{
	uint counts[];
};

layout(std430, binding=DATA) buffer Data{
	uint buf[];
} data[NUM_DATA_ELEMENTS];

layout(std430, binding=SUMS) buffer Sums{
	uint sums[];
};

shared uint local_counts[8192];
shared uint local_sum[RADIX];

void main(){
	uint thid = gl_LocalInvocationIndex;
	uint group = thid/R;
	
	if(thid == 0){
		uint sum = 0;
		for(int i = 0; i < RADIX; i++){
			uint temp = sums[i];
			local_sum[i] = sum;
			sum += temp;
		}
	}

	if(IS_GROUP_LEADER(thid, R)){	
		for(uint i = 0; i < Radix; i++){
			uint local_bit_Idx = i * Num_Groups_per_WorkGroup + group;
			uint global_bit_Idx = i * (gl_NumWorkGroups.x * Num_Groups_per_WorkGroup) + gl_WorkGroupID.x * Num_Groups_per_WorkGroup + group;
			local_counts[local_bit_Idx] = counts[global_bit_Idx];
		}
	}

	BARRIER;

	for(uint r = 0; r < Num_Elements_Per_Group; r += R){
		uint idx = (gl_WorkGroupID.x * Num_Groups_per_WorkGroup + group) * Num_Elements_Per_Group + (thid % R) + r;

		if(idx >= Num_Elements) break;
			
			uint word = data[0].buf[idx];
			uint bit = DIGIT(word, byte, Radix);
			uint bitIdx = bit * Num_Groups_per_WorkGroup + group;


			for(int i = 0; i < R; i++){
				if(thid%R == i) {
					uint localOffset = local_counts[bitIdx]++;
					uint globalOffset = local_sum[bit];
					data[OUT_CELL_ID].buf[localOffset + globalOffset] = data[IN_CELL_ID].buf[idx];
					
				}
				BARRIER;
			}
	}
	BARRIER;
	memoryBarrier();
}