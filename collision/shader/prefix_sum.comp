#version 460 core 

#define N 512	
#define COUNTS 0
#define RADICES_PER_WG 4
#define NUM_RADICES 256
#define SYNCTHREADS groupMemoryBarrier(); barrier()

layout(local_size_x=1024) in;

layout(std430, binding=COUNTS) buffer Counts{
	uint counts[];
};

layout(std430, binding=1) buffer SUM{
	uint sums[];
} ;

shared uint local_counts[N];
shared uint local_sums[RADICES_PER_WG];

void prefixScan(inout uvec4 v, out uint sum){
	sum = 0;
	uint temp = v.x;
	v.x = sum;
	sum += temp;
	
	temp = v.y;
	v.y = sum;
	sum += temp;

	temp = v.z;
	v.z = sum;
	sum += temp;

	temp = v.w;
	v.w = sum;
	sum += temp;
}

void main(){
	uint thid = gl_LocalInvocationIndex;
	uint g_thid = gl_GlobalInvocationID.x;

	for(int i = 0; i < RADICES_PER_WG; i++){
		int cOffset = int(gl_WorkGroupID.x * gl_NumWorkGroups.x + i * gl_WorkGroupSize.x * 2);
		uvec4 temp0 = uvec4(counts[8 * g_thid + 0 + cOffset], counts[8 * g_thid + 1 + cOffset], counts[8 * g_thid + 2 + cOffset], counts[8 * g_thid + 3 + cOffset]);
		uvec4 temp1 = uvec4(counts[8 * g_thid + 4 + cOffset], counts[8 * g_thid + 5 + cOffset], counts[8 * g_thid + 6 + cOffset], counts[8 * g_thid + 7 + cOffset]);

		uint sum = 0;
		prefixScan(temp0, sum);
		local_counts[2 * thid] = sum;

		prefixScan(temp1, sum);
		local_counts[2 * thid + 1] = sum;

		uint offset = 1;
		for(uint d = N >> 1; d > 0; d >>= 1){
			SYNCTHREADS;
			if(thid < d){
				uint ai = offset * ( 2 * thid+1) -1;
				uint bi = offset * ( 2 * thid+2) -1;
				local_counts[bi]  += local_counts[ai];
			}
			offset *= 2;
		}

		if(thid == 0){  
			local_sums[i]= local_counts[N - 1];
			local_counts[N - 1] = 0;
		}

	    for(uint d = 1; d < N; d *= 2){
			offset >>= 1;
			SYNCTHREADS;
			if(thid < d){
				uint ai = offset * (2 * thid + 1) - 1;
				uint bi = offset * (2 * thid + 2) - 1;
				uint t = local_counts[ai];
				local_counts[ai] = local_counts[bi];
				local_counts[bi] += t;
			}
		}
		SYNCTHREADS;

		uint sum0 = local_counts[2 * thid];
		uint sum1 = local_counts[2 * thid + 1];

		temp0.x += sum0;
		temp0.y += sum0;
		temp0.z += sum0;
		temp0.w += sum0;

    
		temp1.x += sum1;
		temp1.y += sum1;
		temp1.z += sum1;
		temp1.w += sum1;

		counts[8 * g_thid + cOffset] = temp0.x;
		counts[8 * g_thid + 1 + cOffset] = temp0.y;   
		counts[8 * g_thid + 2 + cOffset] = temp0.z;
		counts[8 * g_thid + 3 + cOffset] = temp0.w;

    
		counts[8 * g_thid + 4 + cOffset] = temp1.x;
		counts[8 * g_thid + 5 + cOffset] = temp1.y;   
		counts[8 * g_thid + 6 + cOffset] = temp1.z;
		counts[8 * g_thid + 7 + cOffset] = temp1.w;

		sums[gl_WorkGroupID.x * RADICES_PER_WG + i] = local_sums[i];

		// TODO prefix sum of sums;
	}
}