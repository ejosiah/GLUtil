#version 450 core
#pragma debug(on)
#pragma optimize(off)

layout(local_size_x = 5, local_size_y = 5, local_size_z = 1) in;

//layout(rgba32f, binding=0) uniform image2D img;
const ivec2 center = ivec2(2, 2);

layout(std430, binding=0) buffer CURR_POS{
	vec3 positions[];
};

layout(std430, binding=1) buffer PREV_POS{
	vec3 prev_positions[];
};

layout(std430, binding=0) buffer COLOR_SSBO{
    vec4 colors[25];
};

layout(std430, binding=1) buffer COEFFICIENT_BLOCK{
	float vd;
	float ks[3];
	float kd[3];
} Coefficients;

uniform float cloth_size;
uniform float dt = 0.016666666666666;
uniform float gravity = 9.8;
uniform float m;

const uint TOP_LEFT_CORNER = 0;
const uint TOP_RIGHT_CORNER = (gl_NumWorkGroups * gl_WorkGroupSize).x - 1;

uint globalIndex(){
	uvec3 n = gl_NumWorkGroups * gl_WorkGroupSize;
	uvec3 id = gl_GlobalInvocationID;
	return id.z * n.x * n.y  + id.y * n.x + id.x;
}

uint flatten(ivec3 id){
	uvec3 n = gl_NumWorkGroups * gl_WorkGroupSize;
	return id.z * n.x * n.y  + id.y * n.x + id.x;
}


const ivec2 Springs[3][4] = {
	{ ivec2(1, 0), ivec2(0, -1), ivec2(-1, 0), ivec2(0, 1) } // structural springs  
	, { ivec2(1, -1), ivec2(-1, -1), ivec2(-1, 1), ivec2(1, 1) } // shear springs
	, { ivec2(2, 0), ivec2(0, -2), ivec2(-2, 0), ivec2(0, 2) } // flex springs
};

vec3 spring_force(vec3 x, vec3 x1, vec3 v, vec3 v1, float l, float kd, float ks){
	vec3 d = x - x1;
	float dl = length(d);

	float left = -ks * (dl - l);
	float right = kd * dot(v - v1, d/dl);
	
	return ((d/dl) * (left + right));
}

vec3 external_force(vec3 velocity, float damping, float mass){
	return gravity * mass + velocity * damping;
}

vec3 integrate(vec3 p, vec3 p1, vec3 a, float t){
	return 2 * p - p1  + a * t * t;
}

const vec4 s_color[4] = {
	vec4(0, 1, 0, 1),
	vec4(0, 1, 1, 1),
	vec4(1, 1, 0, 1),
	vec4(1, 0, 0, 1)
};

bool exists(ivec2 pos){
	uvec2 size = (gl_NumWorkGroups * gl_WorkGroupSize).xy;
	return pos.x > -1 && pos.x < size.x && pos.y > -1 && pos.y < size.y;
}

void mass_spring(){
	uint loc = globalIndex();
	vec3 pos = positions[loc];
	vec3 prev_pos = prev_positions[loc];
	vec3 velocity = (pos - prev_pos)/dt;
	float mass = m;

	if(loc == TOP_LEFT_CORNER || loc == TOP_RIGHT_CORNER) mass = 0; 

	vec3 force = external_force(velocity, Coefficients.vd, mass);

	for(int i = 0; i < 3; i++){
		for(int j = 0; j < 4; j++){
			ivec3 neighbor = ivec3(gl_GlobalInvocationID) + ivec3(Springs[i][j], 1);
			if(!exists(neighbor.xy)) continue;
			uint loc = flatten(neighbor);
			vec3 pos1 = positions[loc];
			vec3 prev_pos1 = prev_positions[loc];
			vec3 velocity1 = (pos1 - prev_pos1)/dt;

			float resting_length = length(Springs[i][j] * cloth_size);

			force += spring_force(pos, pos1, velocity, velocity1, resting_length, Coefficients.kd[i], Coefficients.ks[i]);
		}
	}

	vec3 acceleration = force/mass;

	prev_positions[loc] = pos;
	positions[loc] = integrate(pos, prev_pos, acceleration, dt);
}

float rand(vec3 seed){
	return fract(sin(dot(seed, vec3(12.5, 8.7, 2.5)) * 123456.789));
}

void main(){
	ivec3 id = ivec3(gl_GlobalInvocationID);
	uint loc = flatten(id);
	if(id.xy == center){
		colors[loc] = s_color[3];
	}else{
		float r = rand(id);
		float g = rand(id * 2);
		float b = rand(id * 3);
		vec3 c = vec3(r, g, b);
		colors[loc] = vec4(c, 1);
	}

	if(loc == TOP_LEFT_CORNER || loc == TOP_RIGHT_CORNER) colors[loc] = vec4(0, 0, 1, 1);

	for(int i = 0; i < 3; i++){
		for(int j = 0; j < 4; j++){
			if(Springs[i][j] + center == id.xy){
				colors[loc] = s_color[i];
				break;
			}
		}
	}
}